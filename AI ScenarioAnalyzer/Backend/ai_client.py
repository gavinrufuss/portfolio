import os
from openai import OpenAI
from dotenv import load_dotenv
from models import ScenarioAnalysisResponse

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# def call_openai_api(prompt: str) -> ScenarioAnalysisResponse: ---- Uncomment this to use real OpenAI API
#     response = client.chat.completions.create(
#         model="gpt-3.5-turbo",
#         messages=[{"role": "user", "content": prompt}],
#         temperature=0.7,
#     )

#     content = response.choices[0].message.content
#     return parse_ai_response(content)

def call_openai_api(prompt: str) -> ScenarioAnalysisResponse:
    return ScenarioAnalysisResponse(
        scenarioSummary="A small team must deliver a client project within 6 weeks on a $10,000 budget.",
        
        potentialPitfalls=[
            "Scope creep due to unclear requirements",
            "Underestimation of resource constraints",
            "Risk of burnout with limited manpower"
        ],

        proposedStrategies=[
            "Define clear milestones and requirements early",
            "Implement lean project management principles",
            "Conduct weekly check-ins to monitor progress"
        ],

        recommendedResources=[
            "Trello or Jira for agile task management",
            "Open-source libraries to reduce cost",
            "Online tutorials for rapid skill upskilling"
        ],

        disclaimer="These suggestions are generated by AI; consult subject matter experts for tailored guidance."
    )

def parse_ai_response(content: str) -> ScenarioAnalysisResponse:
    sections = {
        "scenarioSummary": "",
        "potentialPitfalls": [],
        "proposedStrategies": [],
        "recommendedResources": [],
        "disclaimer": ""
    }

    lines = [line.strip("- ").strip() for line in content.strip().split("\n") if line.strip()]
    
    current = None
    for line in lines:
        l = line.lower()
        if "summary" in l:
            current = "scenarioSummary"
            continue
        elif "pitfall" in l:
            current = "potentialPitfalls"
            continue
        elif "strateg" in l:
            current = "proposedStrategies"
            continue
        elif "resource" in l:
            current = "recommendedResources"
            continue
        elif "disclaimer" in l:
            current = "disclaimer"
            continue

        if current == "scenarioSummary" and not sections[current]:
            sections[current] = line
        elif current == "disclaimer" and not sections[current]:
            sections[current] = line
        elif current in ["potentialPitfalls", "proposedStrategies", "recommendedResources"]:
            sections[current].append(line)

    return ScenarioAnalysisResponse(**sections)
